from random import randint
class Complex(object):
    def __init__(self,r,c):
        self.r = r
        self.c = c
    def sze(self):
        return self.r * self.r + self.c * self.c
pal = []
rmin = -2.0
rmax = 2.0
cmin = -2.0
cmax = 2.0
a = 0
b = 0
def setPallete():
    mypal = []
    for x in range(75):
        mypal.append(randint(0,256))
    return mypal
def setup():
    size(800,800)
    background(255)
    colorMode(RGB)
    noLoop()
   
def draw():
    rect(0,0,width,height)
    global pal,rmin,rmax,cmin,cmax
    pal = setPallete()
    maxIter=100
    for row in range(height):
        for col in range(width):
            iter = 0
            z = Complex(0,0)
            c = Complex(rmin+(rmax-rmin)*col/width,cmax-(cmax-cmin)*row/height)
            while(iter<maxIter) and z.sze() < 4:
                t = z.r*z.r - z.c*z.c + c.r
                z.c = 2*z.c*z.r+c.c
                z.r = t
                iter += 1
            if iter == maxIter:
                stroke(0)
            else:
                x = iter % 25
                stroke(pal[3*x],pal[3*x+1],pal[3*x+2])
            point(col,row)
        print row
    print rmin,cmin, rmax, cmax
def mousePressed():
    global a,b
    a = rmin+(rmax-rmin)*mouseX/width
    b = cmax-(cmax-cmin)*mouseY/height
def mouseReleased():
    global a,b,rmin,rmax,cmin,cmax
    c = rmin+(rmax-rmin)*mouseX/width
    d = cmax-(cmax-cmin)*mouseY/height
    if(a>c):
        t = a
        a = c
        c = t
    rmin = a
    rmax = c
    if(b < d):
        t = b
        b = d
        d = t
    cmin = d
    cmax = cmin + (rmax - rmin)
    redraw()
